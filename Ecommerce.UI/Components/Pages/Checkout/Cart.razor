@page "/gio-hang"

@inject ILocalStorageService LocalStorage
@inject CartServices CartServices

<link href="css/cart.css" rel="stylesheet" />
<link rel="stylesheet" type="text/css" href="assets/css/style.min.css">

@rendermode InteractiveServer


<main class="main cart">
    <!-- Start of Breadcrumb -->
    <nav class="breadcrumb-nav">
        <div class="container">
            <ul class="breadcrumb shop-breadcrumb bb-no">
                <li class="active"><a>Giỏ hàng</a></li>
                <li><a href="checkout.html">Đặt hàng</a></li>
                <li><a href="order.html">Thanh toán</a></li>
            </ul>
        </div>
    </nav>
    <div class="page-content">
        <div class="container">
            <div class="row gutter-lg mb-10">
                <div class="col-12 mb-6">
                    <table class="shop-table cart-table">
                        <thead>
                            <tr>
                                <th class="product-name"><span>Sản phẩm</span></th>
                                <th></th>
                                <th class="product-price"><span>Giá Giảm</span></th>
                                <th class="product-price"><span>Giá</span></th>
                                <th class="product-quantity product__quantity_item"><span>Số lượng</span></th>
                                <th class="product-subtotal text-center"><span>Hành động</span></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (carts != null && carts.Any())
                            {
                                @foreach (var item in carts)
                                {
                                    // Kiểm tra nếu StockQuantity = 0
                                    var disableClass = item.StockQuantity == 0 ? "disable" : "";
                                    <tr class="">
                                        <td class="product-thumbnail">
                                            <div class="p-relative">
                                                <a>
                                                    <figure>
                                                        <img src="@(string.IsNullOrEmpty(item.ImageFilePath) ? "/Img_Dev/banner.png" : item.ImageFilePath)" alt="product"
                                                             width="300" height="338" onerror="this.onerror=null;this.src='/Img_Dev/banner.png';">
                                                    </figure>

                                                </a>
                                                <button @onclick="() => DeleteCartItem(item.ProductId)" class="btn btn-close">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        </td>
                                        <td class="product-name">
                                            <a class="no_wrap_2">
                                                @item.Name
                                            </a>
                                            <span class="product-category"><a class="category_product">@item.CategoryName</a></span>
                                            @if (item.StockQuantity == 0)
                                            {
                                                <div class="fs-3 mt-1 out_of_stock">
                                                    <span>Hết hàng</span>
                                                </div>
                                            }
                                        </td>
                                        <td class="product-price">
                                            <del class="old-price">@item.Discount.ToString("N0")<span class="currency-symbol">đ</span>  </del>
                                        </td>
                                        <td class="product-price">
                                            <ins class="new-price text-danger">@item.Price.ToString("N0") <span class="currency-symbol">đ</span></ins>
                                        </td>
                                        <td class="product-quantity product__quantity_item">
                                            <div class="input-group @disableClass">
                                                <input class="quantity form-control" type="number" value="@item.Quantity" @onchange="(e) => OnQuantityInputChanged(item, e.Value.ToString())" min="1" max="@item.StockQuantity" disabled="@(item.StockQuantity == 0)">
                                                <button class="quantity-plus w-icon-plus" @onclick="() => IncreaseQuantity(item)" disabled="@((item.StockQuantity == 0) ? true : false)"></button>
                                                <button class="quantity-minus w-icon-minus" @onclick="() => DecreaseQuantity(item)" disabled="@((item.StockQuantity == 0) ? true : false)"></button>
                                            </div>
                                            @if (errorMessage != null)
                                            {
                                                <div class="alert alert-danger">
                                                    @errorMessage
                                                </div>
                                            }
                                        </td>


                                        <td class="product-subtotal text-center">
                                            <a href="javascript:void()" @onclick="() => DeleteCartItem(item.ProductId)" class="amount">
                                                <i class="fas fa-trash-alt" style="color: red;"></i>
                                            </a>
                                        </td>

                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td>
                                        <img src="img_dev/datanull.jpg" class="img-fluid" alt="Image" />
                                    </td>
                                    <td></td>
                                    <td></td>

                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="cart-action mb-6">
                        <a onclick="window.location.href='/san-pham'" class="btn btn-dark btn-rounded btn-icon-left btn-shopping mr-auto"><i class="w-icon-long-arrow-left"></i>Về trang mua sắm</a>
                        <span class="total_price">Tổng tiền : @totalPrice.ToString("N0")</span>
                        <button type="submit" class="btn btn-rounded btn-update" name="update_cart" value="Update Cart">Mua hàng</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End of PageContent -->
</main>

@code {
    private IEnumerable<CartItemDto> carts = new List<CartItemDto>();
    private string message;
    private string errorMessage;
    private decimal totalPrice;
    private bool isRendered = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isRendered)
        {
            isRendered = false; // Đảm bảo LoadListCarts chỉ gọi một lần khi render
            await LoadListCarts();
        }
    }

    private async Task LoadListCarts()
    {
        var userId = await LocalStorage.GetItemAsync<string>("userId");
        if (string.IsNullOrEmpty(userId))
        {
            message = "Vui lòng đăng nhập để bình luận.";
            return;
        }

        var response = await CartServices.GetCartAsync(userId);
        if (response != null && response.Success)
        {
            carts = response.Data.Items;
            totalPrice = response.Data.TotalPrice;
        }
        else
        {
            carts = new List<CartItemDto>();
            message = response?.Message ?? "Lỗi khi lấy giỏ hàng.";
        }
        StateHasChanged();
    }

    private async Task UpdateCartItemQuantity(Guid productId, int quantity)
    {
        if (quantity < 1)
        {
            quantity = 1;
        }

        var userId = await LocalStorage.GetItemAsync<string>("userId");

        var request = new UpdateCartItemDto
            {
                ProductId = productId,
                UserId = userId,
                Quantity = quantity
            };

        var response = await CartServices.UpdateCartItemQuantityAsync(request);
        if (response != null && response.Success)
        {
            await LoadListCarts();
        }
        else
        {
            message = response?.Message ?? "Lỗi khi cập nhật số lượng.";
        }

        StateHasChanged();
    }

    private async Task DeleteCartItem(Guid productId)
    {
        var userId = await LocalStorage.GetItemAsync<string>("userId");
        if (string.IsNullOrEmpty(userId))
        {
            message = "Bạn cần đăng nhập để thực hiện thao tác này.";
            return;
        }

        var response = await CartServices.DeleteFromCartAsync(userId, productId);

        if (response.Success)
        {
            await LoadListCarts();
            message = response.Message;
        }
        else
        {
            message = response.Message;
        }
    }

    private void IncreaseQuantity(CartItemDto item)
    {
        if (item.Quantity < item.StockQuantity)
        {
            item.Quantity++;
            UpdateCartItemQuantity(item.ProductId, item.Quantity);
            errorMessage = null;
        }
        else
        {
            errorMessage = $"Vì cửa hàng chỉ còn {item.StockQuantity} sản phẩm, bạn không được đặt quá số lượng.";
        }
    }
    private void DecreaseQuantity(CartItemDto item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            UpdateCartItemQuantity(item.ProductId, item.Quantity);
            errorMessage = null;
        }
    }
    private void OnQuantityInputChanged(CartItemDto item, string inputValue)
    {
        // Chuyển đổi giá trị nhập từ input sang kiểu số nguyên
        if (int.TryParse(inputValue, out int quantity))
        {
            if (item.Quantity < item.StockQuantity)
            {
                item.Quantity = item.StockQuantity;
                errorMessage = $"Vì cửa hàng chỉ còn {item.StockQuantity} sản phẩm, bạn không được đặt quá số lượng..";
            }
            else if (quantity < 1)
            {
                item.Quantity = 1; // Đảm bảo số lượng ít nhất là 1
                errorMessage = $"Số lượng sản phẩm phải lớn hơn hoặc bằng 1";
            }
            else
            {
                item.Quantity = quantity; // Gán số lượng nhập nếu hợp lệ
                errorMessage = null; // Xóa thông báo lỗi nếu nhập đúng
            }
            UpdateCartItemQuantity(item.ProductId, item.Quantity);
        }
        else
        {
            item.Quantity = 1;
        }
    }

}